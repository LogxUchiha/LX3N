import subprocess
import pandas as pd
import os
import sys
import requests

def get_external_ip():
    try:
        response = requests.get('https://api.ipify.org')
        external_ip = response.text
    except requests.exceptions.RequestException as e:
        external_ip = "Unable to retrieve external IP"
    return external_ip

def print_welcome():
    print("""
 █████          █████ █████     ████████     ██████   █████   
░░███          ░░███ ░░███     ███░░░░███   ░░██████ ░░███    
 ░███           ░░███ ███     ░░░    ░███    ░███░███ ░███    
 ░███            ░░█████         ██████░     ░███░░███░███    
 ░███             ███░███       ░░░░░░███    ░███ ░░██████    
 ░███      █     ███ ░░███     ███   ░███    ░███  ░░█████    
 ███████████    █████ █████   ░░████████     █████  ░░█████   
░░░░░░░░░░░    ░░░░░ ░░░░░     ░░░░░░░░░     ░░░░░░    ░░░░░    
    """)
    
    print("""Welcome to Wireless Pentest Tool
Developed by logxtron""")a

def start_monitor_mode(interface):
    print(f"Starting monitor mode on {interface}...")
    result = subprocess.run(['airmon-ng', 'start', interface], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error starting monitor mode on {interface}: {result.stderr}")
        sys.exit(1)
    else:
        print(result.stdout)

def stop_monitor_mode(interface):
    print(f"Stopping monitor mode on {interface}...")
    result = subprocess.run(['airmon-ng', 'stop', interface], capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error stopping monitor mode on {interface}: {result.stderr}")
    else:
        print(result.stdout)

def scan_networks(interface, duration=30):
    print(f"Scanning networks on interface {interface} for {duration} seconds...")
    cmd = ['airodump-ng', '-w', 'scan_results', '--output-format', 'csv', interface]
    try:
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=duration)
        if process.returncode != 0:
            print(f"Error during scan: {process.stderr.decode()}")
        else:
            print("Scan completed successfully.")
    except subprocess.TimeoutExpired:
        print(f"Scan completed after {duration} seconds.")
    except Exception as e:
        print(f"An error occurred while running airodump-ng: {e}")
        sys.exit(1)

def parse_results():
    csv_file = 'scan_results-01.csv'
    if not os.path.exists(csv_file):
        print(f"CSV file '{csv_file}' not found. Ensure that airodump-ng captured data.")
        sys.exit(1)
    
    try:
        # Read the raw CSV and inspect the columns
        df = pd.read_csv(csv_file, skiprows=1)
        df.dropna(axis=0, how='all', inplace=True)
        df.dropna(axis=1, how='all', inplace=True)
        df.columns = df.columns.str.strip()

        # Debugging raw CSV to verify columns
        print("Raw CSV Columns:", df.columns.tolist())
        print("Raw Data Sample:")
        print(df.head())

        # Map columns to the desired ones
        # Adjusting based on the columns you need
        required_columns = ['# BSSID', 'Channel', 'Speed', 'Privacy', 'Cipher', 'Authentication', 'Power', '# beacons', 'ESSID', 'Key']
        for col in required_columns:
            if col not in df.columns:
                print(f"Required column '{col}' not found in the CSV. Please check the file format.")
                sys.exit(1)

        # Keep only the required columns
        filtered_df = df[required_columns]
        return filtered_df
    except Exception as e:
        print(f"An error occurred while parsing the CSV file: {e}")
        sys.exit(1)

def load_oui_data(oui_file):
    bssid_to_manufacturer = {}
    try:
        with open(oui_file, 'r') as file:
            lines = file.readlines()
            for line in lines:
                if "(hex)" in line:
                    parts = line.split()
                    if len(parts) >= 3:
                        mac_prefix = parts[0].replace('-', ':').upper()
                        manufacturer = " ".join(parts[2:])
                        bssid_to_manufacturer[mac_prefix] = manufacturer
    except Exception as e:
        print(f"Error loading OUI file: {e}")
        sys.exit(1)
    return bssid_to_manufacturer

def get_manufacturer(mac_address, bssid_to_manufacturer):
    mac_prefix = mac_address.upper()[:8]
    return bssid_to_manufacturer.get(mac_prefix, "Unknown")

def enrich_data(ap_df, bssid_to_manufacturer):
    print("Enriching Access Points data with manufacturer information...")
    ap_df['Manufacturer'] = ap_df['# BSSID'].apply(lambda mac: get_manufacturer(mac, bssid_to_manufacturer))
    return ap_df

def main():
    print_welcome()
    
    # Get and print the external IP address
    external_ip = get_external_ip()
    print(f"External IP Address: {external_ip}")

    # Path to the downloaded OUI file
    oui_file = 'oui.txt'
    if not os.path.exists(oui_file):
        print(f"OUI file '{oui_file}' not found. Please download it from https://standards-oui.ieee.org/oui/oui.txt.")
        sys.exit(1)

    # Load the OUI data
    bssid_to_manufacturer = load_oui_data(oui_file)

    interface = 'wlan0'

    # Start monitoring and scan
    start_monitor_mode(interface)
    scan_networks(interface)

    # Parse results and enrich data
    ap_df = parse_results()
    ap_df = enrich_data(ap_df, bssid_to_manufacturer)

    # Save enriched data to CSV
    output_file = 'detailed_ap_scan_results.csv'
    ap_df.to_csv(output_file, index=False)
    print(f"\nScan complete. Detailed AP results saved to '{output_file}'.")

    stop_monitor_mode(interface)
    print("=== Script Finished ===")

if __name__ == '__main__':
    main()
